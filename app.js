// Generated by CoffeeScript 1.9.2
(function() {
  angular.module('metaEditor', ['ngResource', 'ngMessages', 'ui.router', 'mgcrea.ngStrap', 'ui.bootstrap']).config([
    '$urlRouterProvider', '$stateProvider', '$httpProvider', function($urlRouterProvider, $stateProvider, $httpProvider) {
      $httpProvider.interceptors.push("AuthInterceptor");
      $urlRouterProvider.otherwise('/');
      return $stateProvider.state('login', {
        url: '/',
        templateUrl: 'views/login.html',
        guestView: true,
        controller: 'LoginCtrl'
      }).state('reports', {
        url: "/reports-view",
        guestView: false,
        templateUrl: 'views/reports.html',
        controller: 'ReportCtrl'
      }).state('legal_head', {
        url: "/legalHeads/:court",
        guestView: false,
        templateUrl: 'views/legal-heads.html',
        controller: 'LegalHeadsCtrl'
      }).state('subject_matter', {
        url: "/legalHeads/:court/:legal_head",
        guestView: false,
        templateUrl: 'views/subject-matters.html',
        controller: 'LegalHeadCtrl'
      }).state('issue', {
        guestView: false,
        url: "/legalHeads/:court/:legal_head/:subject",
        templateUrl: 'views/issues.html',
        controller: 'IssuesCtrl'
      });
    }
  ]).run([
    '$rootScope', 'AuthEvents', 'AuthService', 'AppConstants', '$state', '$window', function($rootScope, AuthEvents, AuthService, AppConstants, $state, $window) {
      var toLogin;
      $rootScope.$on(AuthEvents.notAuthenticated, function() {
        return toLogin();
      });
      $rootScope.$on(AuthEvents.sessionTimeout, function() {
        AuthService.logout();
        return toLogin();
      });
      $rootScope.$on(AuthEvents.loginFailed, function() {
        return alert("Login Failed");
      });
      $rootScope.$on('$stateChangeStart', function(event, next) {
        if (AuthService.isGuest() && !next.guestView) {
          return toLogin();
        }
      });
      return toLogin = function() {
        return $window.location.href = '.';
      };
    }
  ]).constant("CONF", {
    countHeader: "ME-Count",
    pageHeader: "ME-Page"
  });

  String.prototype.hexEncode = function() {
    var hex, i, k, ref, result;
    result = "";
    for (i = k = 0, ref = this.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
      hex = this.charCodeAt(i).toString(16);
      result += ("000" + hex).slice(-4);
    }
    return result;
  };

  String.prototype.hexDecode = function() {
    var back, hexes, j, k, ref;
    hexes = this.match(/.{1,4}/g) || [];
    back = "";
    for (j = k = 0, ref = hexes.length - 1; 0 <= ref ? k <= ref : k >= ref; j = 0 <= ref ? ++k : --k) {
      back += String.fromCharCode(parseInt(hexes[j], 16));
    }
    return back;
  };

}).call(this);
